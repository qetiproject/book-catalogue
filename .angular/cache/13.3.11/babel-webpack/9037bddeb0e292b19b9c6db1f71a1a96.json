{"ast":null,"code":"import { InjectionToken } from '@angular/core';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, finalize, map, switchMap } from 'rxjs/operators';\nimport { EventBusEvenets } from '../models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services\";\nimport * as i2 from \"../services\";\nimport * as i3 from \"./add-book.storage\";\nimport * as i4 from \"@ngx-translate/core\";\nexport const COUNTRY_FLAG_URL = new InjectionToken('country flag api token');\nexport let AddBookFacade = /*#__PURE__*/(() => {\n  class AddBookFacade {\n    constructor(countryFlagApi, loadingService, bookService, addBookStorage, fireApiService, eventBuService, translateService) {\n      this.countryFlagApi = countryFlagApi;\n      this.loadingService = loadingService;\n      this.bookService = bookService;\n      this.addBookStorage = addBookStorage;\n      this.fireApiService = fireApiService;\n      this.eventBuService = eventBuService;\n      this.translateService = translateService;\n      this.countries = [];\n    }\n\n    get lastThreeSearches() {\n      return this.addBookStorage.lastThreeSearches;\n    }\n\n    fetchBook(name) {\n      this.loadingService.start();\n      this.bookService.getBooksByName(name).pipe(finalize(() => {\n        this.loadingService.stop(), this.searchKey = '';\n      }), switchMap(book => {\n        var _a;\n\n        if (!book.totalItems) {\n          return of(null);\n        }\n\n        const bookByName = book === null || book === void 0 ? void 0 : book.items[0];\n        this.countries = [];\n        this.countries.push((_a = bookByName.accessInfo) === null || _a === void 0 ? void 0 : _a.country);\n        return forkJoin(this.countries.map(code => this.getCountryWithPopulation(code))).pipe(map(countries => this.mapBook(book, countries)));\n      })).subscribe(book => this._selectedBook = book);\n    }\n\n    search(key) {\n      if (!key) {\n        this.hasError = true;\n        return;\n      }\n\n      this.hasError = false;\n      this.addBookStorage.addToLastSearches(key);\n      this.fetchBook(key);\n    }\n\n    restoreState() {\n      this.addBookStorage.restoreState();\n    }\n\n    getCountryWithPopulation(code) {\n      return this.bookService.getCountry(code).pipe(map(c => {\n        const countryFirst = c[0];\n        return {\n          code: countryFirst.alpha2Code,\n          population: countryFirst.population\n        };\n      }), catchError(() => {\n        return of(null);\n      }));\n    }\n\n    getCountryFlag(code) {\n      return `${this.countryFlagApi}/${code}/shiny/64.png`;\n    }\n\n    mapBook(book, countries) {\n      var _a, _b, _c;\n\n      return {\n        accessInfo: {\n          pdf: book.items[0].accessInfo.pdf,\n          webReaderLink: book.items[0].accessInfo.webReaderLink,\n          country: countries\n        },\n        textSnippet: (_a = book.items[0].searchInfo) === null || _a === void 0 ? void 0 : _a.textSnippet,\n        volumeInfo: {\n          title: book.items[0].volumeInfo.title,\n          authors: book.items[0].volumeInfo.authors,\n          publisher: book.items[0].volumeInfo.publisher,\n          publishedDate: book.items[0].volumeInfo.publishedDate,\n          description: book.items[0].volumeInfo.description,\n          printType: book.items[0].volumeInfo.printType,\n          pageCount: book.items[0].volumeInfo.pageCount,\n          contentVersion: book.items[0].volumeInfo.contentVersion,\n          language: book.items[0].volumeInfo.language,\n          previewLink: book.items[0].volumeInfo.previewLink,\n          categories: book.items[0].volumeInfo.categories,\n          imageLinks: {\n            thumbnail: (_b = book.items[0].volumeInfo.imageLinks) === null || _b === void 0 ? void 0 : _b.thumbnail,\n            smallThumbnail: (_c = book.items[0].volumeInfo.imageLinks) === null || _c === void 0 ? void 0 : _c.smallThumbnail\n          }\n        },\n        saleInfo: {\n          buyLink: book.items[0].saleInfo.buyLink,\n          isEbook: book.items[0].saleInfo.isEbook,\n          saleability: book.items[0].saleInfo.saleability\n        }\n      };\n    }\n\n    getCountryPopulation(country) {\n      return `${this.translateService.instant('catalogue.POPULATION_OF')} ${country.code}: ${country.population}`;\n    }\n\n    submit(body) {\n      this.loadingService.start();\n      this.fireApiService.addBook(body).pipe(finalize(() => this.loadingService.stop())).subscribe(() => {\n        this._selectedBook = null;\n        this.eventBuService.emit(EventBusEvenets.RESETFORM);\n      });\n    }\n\n  }\n\n  AddBookFacade.ɵfac = function AddBookFacade_Factory(t) {\n    return new (t || AddBookFacade)(i0.ɵɵinject(COUNTRY_FLAG_URL), i0.ɵɵinject(i1.LoadingService), i0.ɵɵinject(i2.BookApiService), i0.ɵɵinject(i3.AddBookStorage), i0.ɵɵinject(i2.FireApiService), i0.ɵɵinject(i1.EventBusService), i0.ɵɵinject(i4.TranslateService));\n  };\n\n  AddBookFacade.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddBookFacade,\n    factory: AddBookFacade.ɵfac\n  });\n  return AddBookFacade;\n})();","map":null,"metadata":{},"sourceType":"module"}